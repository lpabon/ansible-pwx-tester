- name: get token from kubernetes
  command: kubectl {{ kubeargs }} -n {{ token_ns }} get secret {{ token_name }} -o json
  register: tokensecret
  connection: local
  when: token_ns is defined and token_name is defined

- set_fact:
    pxtoken: "{{ tokensecret.stdout | from_json | json_query(query) | b64decode }}"
  vars:
    query: 'data."auth-token"'
  when: token_ns is defined and token_name is defined

- name: checking cluster status
  command: /opt/pwx/bin/pxctl -j status
  register: clusterstatus
  failed_when: '(clusterstatus.stdout | from_json).status != "STATUS_OK"'

- name: setup pxctl context
  command: /opt/pwx/bin/pxctl context create admin --token={{ pxtoken }}
  when: pxtoken is defined

- name: check volume exists
  shell: /opt/pwx/bin/pxctl volume list | grep myvol
  register: volexists
  ignore_errors: yes

- name: volume create
  command: /opt/pwx/bin/pxctl volume create -r 1 myvol
  #register: vc
  #failed_when: '(vc.stdout | from_json).status != "Ok"'
  when: volexists.rc != 0

  #- name: host attach
  #  command: /opt/pwx/bin/pxctl -j host attach myvol

- name: volume inspect
  command: /opt/pwx/bin/pxctl -j volume inspect myvol
  register: vi
  until: '(vi.stdout | from_json)[0].runtime_state[0].runtime_state.RuntimeState == "clean"'
  retries: 5
  delay: 2

- name: delete volume
  command: /opt/pwx/bin/pxctl -j volume delete -f myvol
  register: vd
  until: '(vd.stdout | from_json).status == "Ok"'
  retries: 5
  delay: 1

